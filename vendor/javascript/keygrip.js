import e from"crypto";import r from"path";import n from"fs";var i="undefined"!==typeof globalThis?globalThis:"undefined"!==typeof self?self:global;var t={};var s=e,f=r,a=n,u=a.existsSync||f.existsSync,l=f.join(new URL(import.meta.url.slice(0,import.meta.url.lastIndexOf("/"))).pathname,"defaultKeys.json"),o=u(l)?JSON.parse(a.readFileSync(l)):void 0;function Keygrip(e,r,n){r||(r="sha1");n||(n="base64");if(!((this||i)instanceof Keygrip))return new Keygrip(e,r,n);if(!e||!(0 in e)){if(!(e=o))throw"Keys must be provided or default keys must exist.";console.warn("No keys specified, using defaults instead.")}function sign(e,i){return s.createHmac(r,i).update(e).digest(n).replace(/\/|\+|=/g,(function(e){return{"/":"_","+":"-","=":""}[e]}))}(this||i).sign=function(r){return sign(r,e[0])};(this||i).verify=function(e,r){return this.index(e,r)>-1};(this||i).index=function(r,n){for(var i=0,t=e.length;i<t;i++)if(constantTimeCompare(n,sign(r,e[i])))return i;return-1}}Keygrip.sign=Keygrip.verify=Keygrip.index=function(){throw"Usage: require('keygrip')(<array-of-keys>)"};var constantTimeCompare=function(e,r){if(null==e&&null!=r)return false;if(null==r&&null!=e)return false;if(null==e&&null==r)return true;if(e.length!==r.length)return false;var n=1;for(var i=0;i<e.length;i++)n&=e.charAt(i)===r.charAt(i)?1:0;return 1===n};t=Keygrip;var g=t;export default g;

